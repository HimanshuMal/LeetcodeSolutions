class Solution {
    public int findCircleNum(int[][] isConnected) {
        int rows = isConnected.length;
        int cols = isConnected[0].length;
        int ans = 0;

        int numberofcomponents = rows;

        UnionFind uf = new UnionFind(rows);

        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(isConnected[i][j]==1 && i!=j){
                    int p1 = uf.find(i); int p2 = uf.find(j);

                    if(p1!=p2){
                        uf.union(p1,p2);
                        numberofcomponents--;
                    }
                }
            }
        }

        return numberofcomponents;
    }
}

public class UnionFind{
    int[] parent;
    int[] rank;

    public UnionFind(int n){
        parent = new int[n];

        for(int i=0; i<n; i++){parent[i] = i;}
        rank = new int[n];
    }

    public int find(int x){
        if(parent[x]!=x) { parent[x] = find(parent[x]);}
        return parent[x];
    }

    public void union(int p1, int p2){

        int x = find(p1);
        int y = find(p2);

        if(x==y){
            return;
        }

        if(rank[x] < rank[y]){
            parent[x] = y;
        }
        else if(rank[x] > rank[y]){
            parent[y] = x;
        }
        else{
            parent[x] = y;
            rank[y]++;
        }
    }
}